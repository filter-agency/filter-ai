<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="filter-ai" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>Custom set of rules to check for the Filter AI plugin</description>

	<!-- <rule ref="PHPCompatibility"/> -->
	<config name="testVersion" value="7.4-"/>

	<file>.</file>

	<!-- Exclude the Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!-- Exclude the Node Modules directory. -->
	<exclude-pattern>/node_modules/*</exclude-pattern>

	<!-- Ensure certain file types aren't sniffed -->
	<exclude-pattern>*/\.*</exclude-pattern>
	<exclude-pattern>*/.dev/*</exclude-pattern>
	<exclude-pattern>*\.(css|js)</exclude-pattern>
	<exclude-pattern>*\.asset\.php</exclude-pattern>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="."/>

	<arg name="colors"/>
	<arg value="sp"/>

	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, which allows us to
		see the names of the sniffs reporting errors.
		Once we know the sniff names, we can opt to exclude sniffs which don't
		suit our project like so.
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
		-->
		<!-- Forget about file names -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Don't require punctuation after inline comments -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

		<!-- Comment punctuation doesn't matter -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>

		<!-- Only comment when neccessary -->
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />

		<!-- Allow shorthand array syntax -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>
		<exclude name="Universal.Arrays.DisallowShortArraySyntax.Found"/>

		<!-- Ignore un-deprecated function as now valid -->
		<exclude name="WordPress.WP.DeprecatedFunctions.sanitize_urlFound"/>
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs">
		<!-- Don't worry about capitalizing long lines -->
		<exclude name="Generic.Commenting.DocComment.LongNotCapital"/>

		<!-- Dont need to capitalize first letter -->
		<exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>
	</rule>

	<!-- Add in some extra rules from other standards. -->
	<rule ref="Generic.Commenting.Todo"/>

	<!--
	To get the optimal benefits of using WPCS, we should add a couple of
	custom properties.
	Adjust the values of these properties to fit our needs.

	For information on additional custom properties available, check out
	the wiki:
	https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	-->
	<config name="minimum_supported_wp_version" value="6.2.0"/>

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="filter-ai"/>
			</property>
		</properties>
	</rule>

</ruleset>